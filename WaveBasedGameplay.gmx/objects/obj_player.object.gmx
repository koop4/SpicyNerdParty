<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_static</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ini variables]
image_speed = 0.2;
locked = true;
power_rate = 0;
threshold = 20;
minigame = false;
transition_direction = 1;
movingForward = true;
atStartingPoint = true;
axis_flip = 1;

isSalty = false;
wannabeSalty =false;

//Rectangle values
rect_w = 720;
rect_x = (view_wview/2) - 360;
rect_h = 96;
rect_y = view_yview + view_hview - rect_h - 48;


fadein_alpha = 1;

//Player sine wave
divider = 8;

//Target sine wave
wave_freq = .05;
wave_amp = 48;
wave_angle = 0;
base_freq = .05;
base_amp = 48;

max_freq = .06;

wave_power = 0;

for (i=0; i &lt; 512/divider; i += 1)
{
    player_dot_x[i] = rect_x + rect_w/2 + (i*divider);
    player_dot_y[i] = rect_y + rect_h/2;
}
for (i=0; i&lt;1024/divider; i+=1)
{
    
    wave_dot_x[i] = 120 + (i*divider);
    wave_dot_y[i] = rect_y + rect_h/2;
}
wave_y = 0;
player_dots = 512/divider;
wave_dots = 1024/divider;
player_wave_y = 0;
display_mouse_set(display_get_width()/2,display_get_height()/2);






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path Set

//path_start(0,3,0,true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colors

line_col = make_color_hsv(255,255,255);
line_hue = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sine Game Handling
//if (minigame)

if (global.pause) exit; //Exits the code loop when 'Enter' pressed pauses the game
{
    ///Mouse controls and Ini Dots
    if (locked)
    {
        targetY = (window_get_height()/2);
        window_mouse_set(window_get_width()/2,( -view_yview +(window_get_height()/2)));
        if ( abs(mouse_y - targetY) &gt; 1)
        {
            player_wave_y += axis_flip*(.5*( mouse_y - targetY));
        }
    }
    for (i=player_dots-1; i&gt;=0 ;i-=1)
    {
        player_dot_y[i+1] = player_dot_y[i];
    }
    player_wave_y = max(min(player_wave_y,rect_h/2),-rect_h/2);
    player_dot_y[0] = rect_y + rect_h / 2 + player_wave_y;
    
    //Computer Dots
    
    wave_y = sin(wave_angle * wave_freq) * wave_amp;
    for (i=wave_dots-1; i&gt;=0 ;i-=1)
    {
        wave_dot_y[i+1] = wave_dot_y[i];
    }
    
    wave_dot_y[0] = rect_y + rect_h / 2 + wave_y;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Distractor

    if(place_meeting(x,y,obj_distractor)){
        wannabeSalty = true;
    }
    else{
        wannabeSalty = false;
    };
    
if(!isSalty &amp;&amp; wannabeSalty){
     wave_freq = 0.2;
     isSalty = true;
}

if(isSalty &amp;&amp; !wannabeSalty){
     wave_freq = .05;
     isSalty = false;
}


if (place_meeting(x,y,obj_enemy))
{
    if (axis_flip != -1)
        sound_play(snd_axis_neg);
    axis_flip = -1;
}
else
{
    if (axis_flip !=1)
        sound_play(snd_axis_pos);
    axis_flip = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///POWER stats
if (global.pause) exit;

if (minigame)
{
    percent = 0;
    
    for (i=0; i&lt;player_dots; i +=1 )
    
    {
        if (abs(player_dot_y[i]-wave_dot_y[(512/divider)+i]) &lt; threshold)
        {
            percent += 1;
        }
    }
    
    percent = percent / player_dots;
    
    if (percent &gt; .5)
    {
        atStartingPoint = false;
        movingForward = true;
        path_speed = 1;
        wave_power += .2;
    }
    else
    {
        movingForward = false;
        if (path_position &gt; .03) {
            path_speed = -.5;
            movingForward = false;
        }
        else {
            atStartingPoint = true;
            path_speed = 0;
        }
        wave_power -= .1;
    }
    if (transition_direction == 0)
    {
        if (path_index == -1)
        {
            if (room == rm_0)
                path_start(path0,1,0,true);
            if (room == rm_1)
                path_start(path1,1,0,true);
            if (room == rm_2)
                path_start(path3,1,0,true);
        }
    }
        
        /*
    if (abs(player_dot_y[player_dots]-wave_dot_y[player_dots]) &lt; threshold)
    {
        wave_power += 1;
    }
    else
        wave_power -= .75;
        */
    wave_power = max(min(wave_power,100),0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spriteController
if(atStartingPoint){
        image_speed = 0.0;
        sprite_index = spr_player_static;
}
else {
    if(movingForward){
        image_speed = 0.2;
        if(obj_player.direction &lt; 90){
                sprite_index = spr_player_right_top;
        }        
        else if(obj_player.direction &lt; 180){
                sprite_index = spr_player_left_top;
        }        
        else if(obj_player.direction &lt; 270){
                sprite_index = spr_player_left_bottom;
        }        
        else {
                sprite_index = spr_player_right_bottom;
        } 
    } 
    else {   
        image_speed = -0.1;
        if(obj_player.direction &lt; 90){
                sprite_index = spr_player_left_bottom;
        }        
        else if(obj_player.direction &lt; 180){
                sprite_index = spr_player_right_bottom;
        }        
        else if(obj_player.direction &lt; 270){
                sprite_index = spr_player_right_top;
        }        
        else {
                sprite_index = spr_player_left_top;
        }    
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set/Reset Path

//if (global.pause) exit;

//if (path_index == -1)
//left click
if (!minigame &amp;&amp; mouse_check_button_pressed(mb_left))
{
    minigame = true;
    atStartingPoint = false;
    
    if (wave_power == 100)
    {
        wave_power = 0;
        minigame = false;
        wave_freq = random(1);
        wave_amp = random(rect_h/2);
        path_start(0,3,0,false);
        
        for (i=0; i&lt;player_dots; i+=1)
        {
            player_dot_y[i] = rect_y + rect_h/2;
            wave_dot_y[i] = rect_y + rect_h/2;
        }
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera Movement
if (global.pause) exit;//Can't currently pause camera
/*
targetX=(x) - view_wview/2;
targetY=(y) - view_hview/2;
view_xview[0]=(view_xview[0]*7+targetX)/8;//the xview is weighed *7 here. xview*7+targetX*1 --&gt; 8
view_yview[0]=(view_yview[0]*7+targetY)/8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sine Wave Parts


//draw_text(window_get_width()/2,window_get_height()/2,"x");
if (minigame)
{
    //Rectangle
    //draw_text(16,84,string(power_rate));
    draw_set_color(c_black);
    //draw_rectangle(rect_x,rect_y,rect_x+rect_w,rect_y+rect_h,false);
    
    ///Draw Computer Sine
    //draw_text(16,16,"Wave Power: " + string(wave_power));
    for (i=0; i&lt;wave_dots; i+=1)
    {
        //draw the circle
        if (i &lt; wave_dots-1)
        {
            if (axis_flip == 1)
                draw_set_color(c_red);
            else
                draw_set_color(c_fuchsia);
            if (i &gt; wave_dots / 2)
            {
                if (abs(wave_dot_y[i] - player_dot_y[i - (512/divider)]) &lt; threshold)
                    draw_set_color(c_lime);
            }
            draw_line_width(wave_dot_x[i], wave_dot_y[i],
                      wave_dot_x[i+1],wave_dot_y[i+1],4);
                      
            //draw_text(player_dot_x[i],player_dot_y[i] - 16*i,string(player_dot_x[i])+"x"+string(player_dot_y[i]));
            //draw_circle(player_dot_x[i], player_dot_y[i],10,false);
            
        } 
    }
    wave_angle += 1;
    
    ///Draw Player Sine
    //line_hue += 1;
    line_dist = 0;
    //draw_text(16,16,"Wave Power: " + string(wave_power));
    for (i=0; i&lt;player_dots; i+=1)
    {
        line_hue += 1;
        line_dist += 1;
        if (abs(wave_dot_y[i+ (512/divider)] - player_dot_y[i]) &gt;= threshold)
        {
            line_col = make_color_hsv(line_hue,255,255);
            draw_set_color(line_col);
            //draw the circle
            if (i &lt; player_dots-1)
            {
                draw_line_width(player_dot_x[i], player_dot_y[i],
                          player_dot_x[i+1],player_dot_y[i+1],5);
            }
        }
    }
    line_hue -= line_dist-1;
    /*
    //Sin Wave
    draw_set_color(c_red);
    loop_x = 0;
    repeat(rect_w){
        sinAngle1 = sin( wave_angle * wave_freq ) * wave_amp;
        sinAngle2 = sin( (wave_angle+wave_freq) * wave_freq ) * wave_amp;
        draw_line(rect_x + loop_x ,rect_y + (rect_h/2) + sinAngle1,
                  rect_x + loop_x+1 ,rect_y + (rect_h/2) + sinAngle2);
        loop_x += 1;
        wave_angle += wave_freq;
    }
    
    */
    draw_sprite(spr_line_icon,0,player_dot_x[0],player_dot_y[0]);
    draw_healthbar(rect_x + 8, 16, rect_x + rect_w - 8,32,path_position * 100,c_black,c_teal,c_lime,0,true,true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
/*
draw_text(16,16,string(max_freq));
draw_text(16,32,string(wave_freq));
draw_text(16,48,string(math_get_epsilon()));
draw_text(16,64,string(player_wave_y));
draw_text(16,80,string(wannabeSalty));
draw_text(16,96,string(isSalty));

/*

draw_text(16,16,string(window_get_width()/2));
draw_text(16,32,string(window_get_height()/2));
draw_text(16,48,string(mouse_y));
/*
draw_set_color(c_white);
draw_text(player_dot_x[0],player_dot_y[0],"I AM DOT");
draw_text(wave_dot_x[0],wave_dot_y[0],"I AM DOT");
*/
/*
        draw_text(100, 128, string(path_position));
        draw_text( 100, 150, string(path_get_point_x(0,1)));
        
/*
im stuck thats it leave or stay i guess
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade into/out of room
if (transition_direction == 1) // going in
{
    if (fadein_alpha &gt; 0)
        fadein_alpha -= .01;
}
else if (transition_direction == -1) // going out 
{
    
    if (fadein_alpha &lt; 1)
        fadein_alpha += .005;
    if (fadein_alpha &gt;= 1)
        room_goto_next();
}
if (fadein_alpha &gt; 0)
{
    draw_set_alpha(fadein_alpha);
    draw_set_color(c_white);
    draw_rectangle(-1,-1,room_width+1,room_height+1,false);
    draw_set_alpha(1);
}
else
    transition_direction = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pause) exit;

locked = !locked;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
