<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ini variables]
locked = true;
power_rate = 0;
threshold = 32;
minigame = false;
//Rectangle values
rect_w = 1000;
rect_x = view_xview + (view_wview/2) - 500;
rect_h = 128;
rect_y = view_yview + view_hview - rect_h - 140;


//Player sine wave
divider = 8;

//Target sine wave
wave_freq = .25;
wave_amp = 64;
wave_angle = 0;


wave_power = 0;

for (i=0; i &lt; 512/divider; i += 1)
{
    player_dot_x[i] = rect_x + rect_w/2 + (i*divider);
    player_dot_y[i] = rect_y + rect_h/2;
    
    wave_dot_x[i] = rect_x + rect_w/2 + (i*divider);
    wave_dot_y[i] = rect_y + rect_h/2;
}
wave_y = 0;
player_dots = 512/divider;
player_wave_y = 0;
display_mouse_set(display_get_width()/2,display_get_height()/2);






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path Set
path_start(0,3,0,true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colors
line_col = make_color_hsv(255,255,255);
line_hue = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sine Game Handling
//if (minigame)
{
    ///Mouse controls and Ini Dots
    if (locked)
    {
        targetY = (window_get_height()/2);
        window_mouse_set(window_get_width()/2,( -view_yview +(window_get_height()/2)));
        if ( abs(mouse_y - targetY) &gt; 1)
        {
            player_wave_y += .5*( mouse_y - targetY);
        }
    }
    for (i=player_dots-1; i&gt;=0 ;i-=1)
    {
        player_dot_y[i+1] = player_dot_y[i];
    }
    player_wave_y = max(min(player_wave_y,rect_h/2),-rect_h/2);
    player_dot_y[0] = rect_y + rect_h / 2 + player_wave_y;
    
    //Computer Dots
    
    wave_y = sin(wave_angle * wave_freq) * wave_amp;
    for (i=player_dots-1; i&gt;=0 ;i-=1)
    {
        wave_dot_y[i+1] = wave_dot_y[i];
    }
    
    wave_dot_y[0] = rect_y + rect_h / 2 + wave_y;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///POWER stats
if (minigame)
{
    percent = 0;
    for (i=0; i&lt;player_dots; i +=1 )
    
    {
        if (abs(player_dot_y[i]-wave_dot_y[i]) &lt; threshold)
        {
            percent += 1;
        }
    }
    percent = percent / player_dots;
    
    if (percent &gt; .5)
        wave_power += .1;
    else
        wave_power -= .05;
        
    wave_power = max(min(wave_power,100),0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set/Reset Path
if (path_index == -1)
{

    minigame = true;

    if (wave_power == 100)
    {
        wave_power = 0;
        minigame = false;
        wave_freq = random(1);
        wave_amp = random(rect_h/2);
        path_start(0,3,0,false);
        for (i=0; i&lt;player_dots; i+=1)
        {
            player_dot_y[i] = rect_y + rect_h/2;
            wave_dot_y[i] = rect_y + rect_h/2;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera Movement

targetX=(x) - view_wview/2;
targetY=(y) - view_hview/2;
view_xview[0]=(view_xview[0]*7+targetX)/8;//the xview is weighed *7 here. xview*7+targetX*1 --&gt; 8
view_yview[0]=(view_yview[0]*7+targetY)/8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sine Wave Parts
draw_text(window_get_width()/2,window_get_height()/2,"x");
if (minigame)
{
    //Rectangle
    //draw_text(16,84,string(power_rate));
    draw_set_color(c_black);
    draw_rectangle(rect_x,rect_y,rect_x+rect_w,rect_y+rect_h,false);
    
    ///Draw Computer Sine
    //draw_text(16,16,"Wave Power: " + string(wave_power));
    for (i=0; i&lt;player_dots; i+=1)
    {
        //draw the circle
        if (i &lt; player_dots-1)
        {
            if (abs(wave_dot_y[i] - player_dot_y[i]) &lt; threshold)
                draw_set_color(c_lime);
            else
                draw_set_color(c_red);
            draw_line_width(wave_dot_x[i], wave_dot_y[i],
                      wave_dot_x[i+1],wave_dot_y[i+1],4);
                      
            //draw_text(player_dot_x[i],player_dot_y[i] - 16*i,string(player_dot_x[i])+"x"+string(player_dot_y[i]));
            //draw_circle(player_dot_x[i], player_dot_y[i],10,false);
            
        } 
    }
    wave_angle += 1;
    
    ///Draw Player Sine
    //line_hue += 1;
    line_dist = 0;
    //draw_text(16,16,"Wave Power: " + string(wave_power));
    for (i=0; i&lt;player_dots; i+=1)
    {
        line_hue += 1;
        line_dist += 1;
        line_col = make_color_hsv(line_hue,255,255);
        draw_set_color(line_col);
        //draw the circle
        if (i &lt; player_dots-1)
        {
            draw_line_width(player_dot_x[i], player_dot_y[i],
                      player_dot_x[i+1],player_dot_y[i+1],5);
        }
    }
    line_hue -= line_dist-1;
    /*
    //Sin Wave
    draw_set_color(c_red);
    loop_x = 0;
    repeat(rect_w){
        sinAngle1 = sin( wave_angle * wave_freq ) * wave_amp;
        sinAngle2 = sin( (wave_angle+wave_freq) * wave_freq ) * wave_amp;
        draw_line(rect_x + loop_x ,rect_y + (rect_h/2) + sinAngle1,
                  rect_x + loop_x+1 ,rect_y + (rect_h/2) + sinAngle2);
        loop_x += 1;
        wave_angle += wave_freq;
    }
    
    */
    draw_sprite(spr_line_icon,0,player_dot_x[0],player_dot_y[0]);
    draw_healthbar(rect_x + 8, rect_y - 8, rect_x + rect_w - 8, rect_y - 8 - 16,wave_power,c_black,c_teal,c_lime,0,true,true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
draw_text(16,16,string(window_get_width()/2));
draw_text(16,32,string(window_get_height()/2));
draw_text(16,48,string(mouse_y));

/*
im stuck thats it leave or stay i guess
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>locked = !locked;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
